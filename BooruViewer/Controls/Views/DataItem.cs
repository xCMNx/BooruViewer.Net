using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Booru.Core;
using Booru.Ui;

namespace BooruViewer
{
    public enum DataItemState { NoData, PreviewLoading, Preview, NoPreview }
    public class DataItem : BindableBase
    {
        static Geometry NoPreview = Geometry.Parse("M21.609,0H0v32l7.977-6.641L15.992,32l8.004-6.633L32,32V10.301L21.609,0z M18,14V4l10,10H18z");
        static Geometry Loading = Geometry.Parse("M42.150997,52.451C41.791703,55.690533 40.530021,58.802467 38.47265,61.393513 37.145868,63.067978 35.492292,64.526249 33.531418,65.656525 27.143408,69.34655 19.397416,68.534065 13.950893,64.211254 12.465113,62.594089 12.08112,61.013321 12.115019,60.229538 12.195618,58.349377 13.206102,56.547314 14.956078,55.536934 15.232075,55.380638 15.514671,55.247841 15.802467,55.141144 17.669641,54.432758 19.748912,54.776451 21.28679,55.963928 21.500187,56.128025 21.705984,56.30772 21.894781,56.505615 24.032752,58.286877 26.669515,59.336357 29.401177,59.544651 31.971441,59.739948 34.627704,59.19046 37.027369,57.805088 39.295538,56.495216 41.026014,54.615055 42.150997,52.451z M54.820518,39.352001C57.448248,41.281704 59.50947,43.932709 60.726784,47.010815 61.510794,48.99522 61.946997,51.156727 61.946997,53.422329 61.946997,60.797344 57.372747,67.099457 50.906475,69.656769 48.760653,70.133369 47.200734,69.677566 46.536727,69.253067 44.950709,68.24266 43.895998,66.466659 43.895997,64.448353 43.895998,64.130653 43.924698,63.818153 43.974199,63.516151 44.297102,61.544746 45.632917,59.914543 47.429937,59.177544 47.67994,59.073341 47.937643,58.987442 48.203445,58.92234 50.817974,57.96394 53.042,56.200935 54.588816,53.940533 56.042032,51.812927 56.896141,49.240021 56.896141,46.466614 56.896141,43.846809 56.133034,41.406704 54.820518,39.352001z M5.4305954,25.256414C6.3741245,25.267815 7.3279209,25.514568 8.2035904,26.021076 8.4769001,26.177278 8.7321491,26.356981 8.9692097,26.552284 10.514708,27.817903 11.258308,29.789331 11.000309,31.71376 10.964008,31.984665 10.909307,32.247669 10.833708,32.510673 10.357109,35.255516 10.771208,38.062855 11.956108,40.534294 13.070606,42.857227 14.874006,44.880657 17.273804,46.26868 19.544602,47.578701 22.036901,48.135906 24.472999,48.029205 21.487301,49.336525 18.163203,49.800033 14.888405,49.313026 12.776407,49.00312 10.686609,48.300011 8.7243996,47.167194 2.3389034,43.479637 -0.83168411,36.364929 0.18784523,29.487228 0.84678459,27.390896 2.021225,26.265879 2.7192135,25.903873 3.5538082,25.468967 4.4870682,25.245014 5.4305954,25.256414z M56.937487,20.357258C57.756182,20.361692 58.577667,20.423704 59.395748,20.544805 61.507725,20.857307 63.598902,21.560413 65.559872,22.693222 71.945606,26.380749 75.117622,33.495403 74.096786,40.373054 73.437862,42.469471 72.263416,43.591877 71.565392,43.95388 69.89743,44.823589 67.833557,44.849689 66.080891,43.83918 65.807381,43.680378 65.552273,43.500679 65.315163,43.305378 63.770807,42.039768 63.02598,40.068352 63.285191,38.143837 63.320292,37.875637 63.376293,37.610035 63.450596,37.347031 63.925913,34.604813 63.514399,31.794889 62.328156,29.326071 61.212215,27.003155 59.411348,24.977138 57.008961,23.591728 54.741978,22.281818 52.247087,21.724514 49.811998,21.831215 52.050455,20.848858 54.481407,20.343954 56.937487,20.357258z M49.610758,1.8616658C53.479149,1.8954657 57.271275,3.2157501 60.334997,5.645928 61.818102,7.2657417 62.206104,8.8464345 62.169704,9.6303157 62.088905,11.510489 61.078499,13.309992 59.327093,14.320494 59.052494,14.481895 58.771091,14.609495 58.481993,14.718895 56.613586,15.424596 54.534176,15.083496 52.99777,13.895994 52.78417,13.731893 52.579868,13.552193 52.391071,13.35429 50.252964,11.572989 47.614954,10.523587 44.883044,10.315187 42.312735,10.119886 39.657925,10.669389 37.258215,12.05219 34.989908,13.362093 33.259403,15.244896 32.132999,17.409 32.492497,14.166794 33.755502,11.057388 35.812711,8.4662441 37.138316,6.7917408 38.793221,5.3334283 40.75293,4.200617 43.547121,2.5873312 46.602008,1.8353767 49.610758,1.8616658z M25.209024,0.00016355515C26.410856,0.0082429647 27.29083,0.31427062 27.747399,0.60431647 29.333299,1.6147747 30.387999,3.3908731 30.387998,5.4143566 30.387999,5.7294236 30.359299,6.0393704 30.309899,6.344067 29.985699,8.3128594 28.650999,9.9457549 26.854098,10.68267 26.604099,10.784273 26.346399,10.872775 26.080699,10.937877 23.467399,11.896297 21.242199,13.656735 19.6979,15.919785 18.242199,18.04743 17.387999,20.620386 17.387999,23.391346 17.387999,26.011103 18.152399,28.451256 19.463599,30.505998 16.837199,28.576258 14.773399,25.927801 13.557299,22.849634 12.772099,20.86519 12.335999,18.703745 12.335999,16.437995 12.335999,9.0628756 16.912799,2.7606095 23.380199,0.20330679 24.04995,0.054378033 24.662736,-0.0035090446 25.209024,0.00016355515z");

        static DataItem()
        {
        }

        public int Id { get; private set; }
        DataRecord _Data = null;
        public DataRecord Data
        {
            get
            {
                if (_Data == null)
                {
                    _Data = Core.DataContainer.getInfo(Id);
                    NotifyPropertiesChanged(nameof(Data), nameof(Tags));
                }
                return _Data;
            }
        }
        public string Tags
        {
            get
            {
                return string.Join(" ", Data.Tags);
            }
        }
        public string Md5 { get { return Data.MD5; } }

        DataItemState state = DataItemState.NoData;

        FrameworkElement LoadingEl()
        {
            return new RotaitingPath() { GlyphData = Loading, Background = Brushes.Transparent, Margin = new Thickness(20f) };
        }

        FrameworkElement NoPreviewEl()
        {
            return new Border() { Child = new Path() { Data = NoPreview, Stretch = Stretch.Uniform, Fill = Brushes.Gray, Margin = new Thickness(40f) }, Background = new SolidColorBrush(Color.FromArgb(10, 0, 0, 0)) } ;
        }

        FrameworkElement getImage(System.IO.Stream stream)
        {
            return new Image() { Source = BitmapFrame.Create(stream, BitmapCreateOptions.None, BitmapCacheOption.OnLoad), Stretch = Stretch.Uniform };
        }

        public UIElement Preview
        {
            get
            {
                switch (state)
                {
                    case DataItemState.NoData:
                        {
                            var stream = Core.PreviewsContainer.getPreview(Md5);
                            if (stream == null)
                            {
                                if (!StaticData.PreviewTasks.AddTask(Md5, Data.Servers, () =>
                                     {
                                         state = DataItemState.Preview;
                                         NotifyPropertiesChanged(nameof(Preview));
                                     }
                                    ))
                                {
                                    state = DataItemState.NoPreview;
                                    return NoPreviewEl();
                                }
                                state = DataItemState.PreviewLoading;
                                return LoadingEl();
                            }
                            state = DataItemState.Preview;
                            return getImage(stream);
                        }
                    case DataItemState.PreviewLoading:
                        return LoadingEl();
                    case DataItemState.Preview:
                        {
                            var stream = Core.PreviewsContainer.getPreview(Md5);
                            if (stream == null)
                            {
                                state = DataItemState.NoPreview;
                                return NoPreviewEl();
                            }
                            return getImage(stream);
                        }
                    default:
                        return NoPreviewEl();
                }
            }
        }

        public DataItem(int Id)
        {
            this.Id = Id;
        }

    }
}
