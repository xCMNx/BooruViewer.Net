/******************************************************************************/
/***          Generated by IBExpert 2014.6.9.1 26.05.2015 21:49:52          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/

/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN EXT_INDEXES AS
INTEGER;

CREATE DOMAIN FILE_SIZE AS
INTEGER;

CREATE DOMAIN INDEXES AS
BIGINT
NOT NULL;

CREATE DOMAIN MD5 AS
CHAR(32) CHARACTER SET ASCII
COLLATE ASCII;

CREATE DOMAIN POST AS
INTEGER;

CREATE DOMAIN RATING AS
CHAR(1) CHARACTER SET UTF8
COLLATE UTF8;

CREATE DOMAIN SERVER_GROUP_ID AS
INTEGER;

CREATE DOMAIN SERVER_ID AS
INTEGER
NOT NULL;

CREATE DOMAIN SERVER_NAME AS
VARCHAR(64) CHARACTER SET ASCII
NOT NULL
COLLATE ASCII;

CREATE DOMAIN SIMPLE_INDEX AS
INTEGER;

CREATE DOMAIN TAGS AS
VARCHAR(255) CHARACTER SET UTF8
COLLATE UTF8;

CREATE DOMAIN TAGS_128 AS
VARCHAR(128) CHARACTER SET UTF8
COLLATE UTF8;

CREATE DOMAIN UPDATED AS
TIMESTAMP
NOT NULL;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_AUTOR_ID;
CREATE GENERATOR GEN_EXT_INDEX;
CREATE GENERATOR GEN_MD5_INDEX;
CREATE GENERATOR GEN_SRV_GROUP_INDEX;
CREATE GENERATOR GEN_SRV_INDEX;
CREATE GENERATOR GEN_TAG_INDEX;


SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE GET_EMPTY_MD5_ID
RETURNS (
    EMPTY_MD5_ID BIGINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE RESET_MD5_GENERATOR
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE AUTORS (
    AUTOR_ID  SIMPLE_INDEX NOT NULL,
    AUTOR     TAGS_128 NOT NULL
);


CREATE TABLE DATA_INFO (
    DATA_MD5_ID       INDEXES NOT NULL,
    DATA_SERVER_ID    SERVER_ID NOT NULL,
    DATA_SIZE         FILE_SIZE,
    DATA_EXT_ID       EXT_INDEXES,
    DATA_POST_NUMBER  POST,
    UPDATED           UPDATED NOT NULL,
    PARENT_POST       POST,
    CHILD_POST        POST,
    AUTOR_ID          SIMPLE_INDEX
);


CREATE TABLE EMPTY_MD5_ID (
    MD5_ID  INDEXES NOT NULL
);


CREATE TABLE EXT_LIST (
    EXT_ID  EXT_INDEXES NOT NULL,
    EXT     VARCHAR(10) CHARACTER SET ASCII NOT NULL COLLATE ASCII
);


CREATE TABLE MD5_LIST (
    MD5_ID  INDEXES NOT NULL,
    MD5     MD5 NOT NULL,
    RATING  RATING
);


CREATE TABLE SERVERS_LIST (
    SERVER_ID        SERVER_ID NOT NULL,
    SERVER_NAME      SERVER_NAME NOT NULL,
    SERVER_GROUP_ID  SERVER_GROUP_ID
);


CREATE TABLE TAGS (
    MD5_ID  INDEXES NOT NULL,
    TAG_ID  INDEXES NOT NULL
);


CREATE TABLE TAGS_FETCH_CHACHE (
    TAG_ID   INTEGER NOT NULL,
    "CACHE"  BLOB SUB_TYPE 0 SEGMENT SIZE 80 NOT NULL
);


CREATE TABLE TAGS_LIST (
    TAG_ID  INDEXES NOT NULL,
    TAG     TAGS_128 NOT NULL
);




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE AUTORS ADD CONSTRAINT PK_AUTORS PRIMARY KEY (AUTOR_ID, AUTOR);
ALTER TABLE DATA_INFO ADD CONSTRAINT PK_DATA_INFO PRIMARY KEY (DATA_MD5_ID, DATA_SERVER_ID);
ALTER TABLE EMPTY_MD5_ID ADD CONSTRAINT PK_EMPTY_MD5_ID PRIMARY KEY (MD5_ID);
ALTER TABLE EXT_LIST ADD CONSTRAINT PK_EXT_LIST PRIMARY KEY (EXT_ID, EXT);
ALTER TABLE MD5_LIST ADD CONSTRAINT PK_MD5_LIST PRIMARY KEY (MD5_ID, MD5);
ALTER TABLE SERVERS_LIST ADD CONSTRAINT PK_SERVERS_LIST PRIMARY KEY (SERVER_ID, SERVER_NAME);
ALTER TABLE TAGS ADD CONSTRAINT PK_TAGS PRIMARY KEY (MD5_ID, TAG_ID);
ALTER TABLE TAGS_FETCH_CHACHE ADD CONSTRAINT PK_TAGS_FETCH_CHACHE PRIMARY KEY (TAG_ID);
ALTER TABLE TAGS_LIST ADD CONSTRAINT PK_TAGS_LIST PRIMARY KEY (TAG_ID);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX DATA_INFO_IDX1 ON DATA_INFO (DATA_MD5_ID);
CREATE UNIQUE INDEX MD5_LIST_IDX1 ON MD5_LIST (MD5_ID);
CREATE UNIQUE INDEX MD5_LIST_IDX2 ON MD5_LIST (MD5);
CREATE INDEX SERVERS_LIST_IDX1 ON SERVERS_LIST (SERVER_ID);
ALTER INDEX SERVERS_LIST_IDX1 INACTIVE;
CREATE INDEX SERVERS_LIST_IDX2 ON SERVERS_LIST (SERVER_NAME);
ALTER INDEX SERVERS_LIST_IDX2 INACTIVE;
CREATE INDEX TAGS_LIST_IDX1 ON TAGS_LIST (TAG);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: AUTORS_BI0 */
CREATE TRIGGER AUTORS_BI0 FOR AUTORS
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  if(new.autor_id is null) then new.autor_id = next value for GEN_AUTOR_ID;
end
^


/* Trigger: DATA_INFO_BIU0 */
CREATE TRIGGER DATA_INFO_BIU0 FOR DATA_INFO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
begin
  new.updated = CURRENT_TIMESTAMP;
end
^


/* Trigger: DATA_INFO_BU0 */
CREATE TRIGGER DATA_INFO_BU0 FOR DATA_INFO
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  if (new.data_size is null or new.data_size<=0) then new.data_size=old.data_size;
  if (new.data_ext_id is null or new.data_ext_id<=0) then new.data_ext_id=old.data_ext_id;
  if (new.data_post_number is null or new.data_post_number<=0) then new.data_post_number=old.data_post_number;
end
^


/* Trigger: EXT_LIST_BI0 */
CREATE TRIGGER EXT_LIST_BI0 FOR EXT_LIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  new.ext_id = next value for gen_EXT_index;
end
^


/* Trigger: MD5_LIST_BI0 */
CREATE TRIGGER MD5_LIST_BI0 FOR MD5_LIST
ACTIVE BEFORE INSERT POSITION 1
AS
begin
  if (new.md5_id is null) then new.md5_id = next value for gen_md5_index;
end
^


/* Trigger: MD5_LIST_BU0 */
CREATE TRIGGER MD5_LIST_BU0 FOR MD5_LIST
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  if (old.rating = 'e') then new.rating = 'e';
end
^


/* Trigger: MD5_LIST_FROM_EMPTY */
CREATE TRIGGER MD5_LIST_FROM_EMPTY FOR MD5_LIST
INACTIVE BEFORE INSERT POSITION 0
AS
begin
  if(new.md5_id is null) then Begin
    select MIN(MD5_ID) from EMPTY_MD5_ID into new.md5_id;
    if(new.md5_id is not null) then delete from EMPTY_MD5_ID where MD5_ID = new.md5_id;
  end
end
^


/* Trigger: SERVERS_LIST_BI0 */
CREATE TRIGGER SERVERS_LIST_BI0 FOR SERVERS_LIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  new.server_id = next value for gen_srv_index;
end
^


/* Trigger: TAGS_AID0 */
CREATE TRIGGER TAGS_AID0 FOR TAGS
ACTIVE AFTER INSERT OR DELETE POSITION 0
AS
begin
  delete from TAGS_FETCH_CHACHE where TAG_ID = new.tag_id;
end
^


/* Trigger: TAGS_LIST_BI0 */
CREATE TRIGGER TAGS_LIST_BI0 FOR TAGS_LIST
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  new.tag_id = next value for gen_TAG_index;
end
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE GET_EMPTY_MD5_ID
RETURNS (
    EMPTY_MD5_ID BIGINT)
AS
declare variable CUR bigint;
begin
  EMPTY_MD5_ID = 0;
  for select MD5_ID from MD5_LIST order by MD5_ID into :cur do Begin
    while(EMPTY_MD5_ID<cur-1) do Begin
      EMPTY_MD5_ID = EMPTY_MD5_ID + 1;
      suspend;
    end
    EMPTY_MD5_ID = cur;
  end
  cur = GEN_ID(gen_md5_index,0);
  while(EMPTY_MD5_ID<cur) do Begin
    EMPTY_MD5_ID = EMPTY_MD5_ID + 1;
    suspend;
  end
end^


ALTER PROCEDURE RESET_MD5_GENERATOR
AS
declare variable VAL bigint;
begin
    select MAX(MD5_ID) from MD5_LIST into :val;
    EXECUTE STATEMENT 'SET GENERATOR GEN_MD5_INDEX TO ' || :val;
end^



SET TERM ; ^
